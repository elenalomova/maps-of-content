// main.js
const { Plugin, PluginSettingTab, Setting, Notice } = require('obsidian');

const DEFAULT_SETTINGS = {
    mapFileName: 'Maps of Content',
    autoUpdate: true,
    updateInterval: 5,
    excludeFolders: ['.obsidian', '.trash'],
    sortBy: 'name',
    showFileCount: true,
    showLastModified: false,
    includeNestedTags: true,
    showTagHierarchy: false,
    excludeTags: []
};

class MapsOfContentPlugin extends Plugin {
    constructor() {
        super(...arguments);
        this.settings = DEFAULT_SETTINGS;
        this.updateTimer = null;
        this.scheduleTimer = null;
        this.isUpdating = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
    }

    async onload() {
        await this.loadSettings();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        this.addCommand({
            id: 'update-maps-content',
            name: '–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É —Ç–µ–≥–æ–≤',
            callback: () => {
                this.updateMapsContent();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
        this.addCommand({
            id: 'create-maps-content',
            name: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Ç–µ–≥–æ–≤',
            callback: () => {
                this.createMapsContent();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.addSettingTab(new MapsOfContentSettingTab(this.app, this));

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.settings.autoUpdate) {
            this.startAutoUpdate();
        }

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É –∫–∞—Ä—Ç—É –∏–∑ —Å–ª–µ–∂–µ–Ω–∏—è)
        this.registerEvent(
            this.app.vault.on('modify', (file) => {
                if (this.settings.autoUpdate && file.name !== this.settings.mapFileName + '.md') {
                    this.scheduleUpdate();
                }
            })
        );

        this.registerEvent(
            this.app.vault.on('create', (file) => {
                if (this.settings.autoUpdate && file.name !== this.settings.mapFileName + '.md') {
                    this.scheduleUpdate();
                }
            })
        );

        this.registerEvent(
            this.app.vault.on('delete', () => {
                if (this.settings.autoUpdate) {
                    this.scheduleUpdate();
                }
            })
        );

        this.registerEvent(
            this.app.vault.on('rename', (file, oldPath) => {
                if (this.settings.autoUpdate) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ä—Ç–æ–π
                    const oldName = oldPath.split('/').pop();
                    if (file.name !== this.settings.mapFileName + '.md' && oldName !== this.settings.mapFileName + '.md') {
                        this.scheduleUpdate();
                    }
                }
            })
        );
    }

    onunload() {
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
        }
        if (this.scheduleTimer) {
            clearTimeout(this.scheduleTimer);
        }
    }

    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }

    async saveSettings() {
        await this.saveData(this.settings);
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
        }
        
        if (this.settings.autoUpdate) {
            this.startAutoUpdate();
        }
    }

    startAutoUpdate() {
        if (this.updateTimer) {
            clearInterval(this.updateTimer);
        }
        
        this.updateTimer = setInterval(() => {
            this.updateMapsContent();
        }, this.settings.updateInterval * 60 * 1000);
    }

    scheduleUpdate() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.scheduleTimer) {
            clearTimeout(this.scheduleTimer);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.scheduleTimer = setTimeout(() => {
            this.updateMapsContent();
            this.scheduleTimer = null;
        }, 3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 3 —Å–µ–∫—É–Ω–¥
    }

    async createMapsContent() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if (this.isUpdating) {
            return;
        }
        
        this.isUpdating = true;
        
        try {
            const mapContent = await this.generateMapContent();
            const mapFile = this.app.vault.getAbstractFileByPath(this.settings.mapFileName + '.md');
            
            if (mapFile && mapFile.extension === 'md') {
                await this.app.vault.modify(mapFile, mapContent);
            } else {
                await this.app.vault.create(this.settings.mapFileName + '.md', mapContent);
            }
            
            new Notice(`–ö–∞—Ä—Ç–∞ —Ç–µ–≥–æ–≤ "${this.settings.mapFileName}" —Å–æ–∑–¥–∞–Ω–∞!`);
        } finally {
            this.isUpdating = false;
        }
    }

    async updateMapsContent() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.isUpdating) {
            return;
        }
        
        this.isUpdating = true;
        
        try {
            const mapFile = this.app.vault.getAbstractFileByPath(this.settings.mapFileName + '.md');
            
            if (mapFile && mapFile.extension === 'md') {
                const mapContent = await this.generateMapContent();
                await this.app.vault.modify(mapFile, mapContent);
            } else {
                // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                await this.createMapsContent();
            }
        } finally {
            this.isUpdating = false;
        }
    }

    async generateMapContent() {
        const files = this.app.vault.getMarkdownFiles();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã
        const filteredFiles = files.filter(file => {
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É –∫–∞—Ä—Ç—É
            if (file.name === this.settings.mapFileName + '.md') return false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
            for (const excludeFolder of this.settings.excludeFolders) {
                if (file.path.startsWith(excludeFolder + '/')) return false;
            }
            
            return true;
        });

        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        const tagMap = new Map();
        const filesWithoutTags = [];

        for (const file of filteredFiles) {
            const fileCache = this.app.metadataCache.getFileCache(file);
            const tags = this.extractTags(fileCache);
            
            if (tags.length === 0) {
                filesWithoutTags.push(file);
            } else {
                for (const tag of tags) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ–≥
                    if (this.settings.excludeTags.includes(tag)) continue;
                    
                    if (!tagMap.has(tag)) {
                        tagMap.set(tag, []);
                    }
                    tagMap.get(tag).push(file);
                }
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        filesWithoutTags.sort((a, b) => this.sortFiles(a, b));
        for (const [tag, files] of tagMap) {
            files.sort((a, b) => this.sortFiles(a, b));
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        let content = `# ${this.settings.mapFileName}\n\n`;
        content += `*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}*\n\n`;
        
        const totalFiles = filteredFiles.length;
        const totalTags = tagMap.size;
        
        content += `**–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫:** ${totalFiles} | **–í—Å–µ–≥–æ —Ç–µ–≥–æ–≤:** ${totalTags}\n\n`;

        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ —Ç–µ–≥–æ–≤
        if (filesWithoutTags.length > 0) {
            content += this.generateTagSection('‚ùì –ë–µ–∑ —Ç–µ–≥–æ–≤', filesWithoutTags);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
        const sortedTags = Array.from(tagMap.keys()).sort();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
        for (const tag of sortedTags) {
            const tagFiles = tagMap.get(tag);
            content += this.generateTagSection(`üè∑Ô∏è ${tag}`, tagFiles);
        }

        return content;
    }

    extractTags(fileCache) {
        const tags = [];
        
        if (!fileCache) return tags;

        // –¢–µ–≥–∏ –∏–∑ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞
        if (fileCache.frontmatter && fileCache.frontmatter.tags) {
            const frontmatterTags = fileCache.frontmatter.tags;
            if (Array.isArray(frontmatterTags)) {
                tags.push(...frontmatterTags);
            } else if (typeof frontmatterTags === 'string') {
                tags.push(frontmatterTags);
            }
        }

        // –¢–µ–≥–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (#—Ç–µ–≥)
        if (fileCache.tags) {
            for (const tagCache of fileCache.tags) {
                let tag = tagCache.tag;
                if (tag.startsWith('#')) {
                    tag = tag.substring(1);
                }
                
                if (this.settings.includeNestedTags || !tag.includes('/')) {
                    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    // –ï—Å–ª–∏ –Ω–µ—Ç - —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ –±–µ–∑ —Å–ª–µ—à–µ–π
                    tags.push(tag);
                }
                
                // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è —Ç–µ–≥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏
                if (this.settings.showTagHierarchy && tag.includes('/')) {
                    const parts = tag.split('/');
                    for (let i = 1; i < parts.length; i++) {
                        const parentTag = parts.slice(0, i).join('/');
                        if (!tags.includes(parentTag)) {
                            tags.push(parentTag);
                        }
                    }
                }
            }
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        return [...new Set(tags)].filter(tag => tag.trim() !== '');
    }

    generateTagSection(tagName, files) {
        let content = `## ${tagName}\n\n`;
        
        if (this.settings.showFileCount) {
            content += `*–ó–∞–º–µ—Ç–æ–∫: ${files.length}*\n\n`;
        }
        
        for (const file of files) {
            content += this.formatFileEntry(file);
        }
        
        content += '\n';
        return content;
    }

    formatFileEntry(file) {
        let entry = `- üìù [[${file.basename}]]`;
        
        if (file.path !== file.name) {
            entry += ` *(${file.path})*`;
        }
        
        if (this.settings.showLastModified) {
            const modDate = new Date(file.stat.mtime).toLocaleDateString('ru-RU');
            entry += ` - *–∏–∑–º–µ–Ω–µ–Ω–æ: ${modDate}*`;
        }
        
        entry += '\n';
        return entry;
    }

    sortFiles(a, b) {
        switch (this.settings.sortBy) {
            case 'modified':
                return b.stat.mtime - a.stat.mtime;
            case 'created':
                return b.stat.ctime - a.stat.ctime;
            case 'name':
            default:
                return a.basename.localeCompare(b.basename);
        }
    }
}

class MapsOfContentSettingTab extends PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display() {
        const { containerEl } = this;
        containerEl.empty();

        containerEl.createEl('h2', { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Maps of Content' });

        new Setting(containerEl)
            .setName('–ò–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã')
            .setDesc('–ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ —Ç–µ–≥–æ–≤ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .md)')
            .addText(text => text
                .setPlaceholder('Maps of Content')
                .setValue(this.plugin.settings.mapFileName)
                .onChange(async (value) => {
                    this.plugin.settings.mapFileName = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
            .setDesc('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞—Ä—Ç—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.autoUpdate)
                .onChange(async (value) => {
                    this.plugin.settings.autoUpdate = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω—É—Ç—ã)')
            .setDesc('–ö–∞–∫ —á–∞—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞—Ä—Ç—É')
            .addSlider(slider => slider
                .setLimits(1, 60, 1)
                .setValue(this.plugin.settings.updateInterval)
                .setDynamicTooltip()
                .onChange(async (value) => {
                    this.plugin.settings.updateInterval = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫')
            .setDesc('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Ç–µ–≥–µ')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showFileCount)
                .onChange(async (value) => {
                    this.plugin.settings.showFileCount = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è')
            .setDesc('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showLastModified)
                .onChange(async (value) => {
                    this.plugin.settings.showLastModified = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–í–∫–ª—é—á–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏')
            .setDesc('–í–∫–ª—é—á–∞—Ç—å —Ç–µ–≥–∏ —Å —Å–∏–º–≤–æ–ª–æ–º / (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–µ–∫—Ç/—Ä–∞–±–æ—Ç–∞)')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.includeNestedTags)
                .onChange(async (value) => {
                    this.plugin.settings.includeNestedTags = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é —Ç–µ–≥–æ–≤')
            .setDesc('–î–æ–±–∞–≤–ª—è—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ (–ø—Ä–æ–µ–∫—Ç/—Ä–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–∫–∂–µ —Ç–µ–≥ –ø—Ä–æ–µ–∫—Ç)')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showTagHierarchy)
                .onChange(async (value) => {
                    this.plugin.settings.showTagHierarchy = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')
            .setDesc('–°–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–º–µ—Ç–æ–∫')
            .addDropdown(dropdown => dropdown
                .addOption('name', '–ü–æ –∏–º–µ–Ω–∏')
                .addOption('modified', '–ü–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
                .addOption('created', '–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è')
                .setValue(this.plugin.settings.sortBy)
                .onChange(async (value) => {
                    this.plugin.settings.sortBy = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏')
            .setDesc('–ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–∞—Ä—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
            .addTextArea(text => text
                .setPlaceholder('.obsidian, .trash')
                .setValue(this.plugin.settings.excludeFolders.join(', '))
                .onChange(async (value) => {
                    this.plugin.settings.excludeFolders = value
                        .split(',')
                        .map(folder => folder.trim())
                        .filter(folder => folder.length > 0);
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏')
            .setDesc('–¢–µ–≥–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–∞—Ä—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #)')
            .addTextArea(text => text
                .setPlaceholder('—á–µ—Ä–Ω–æ–≤–∏–∫, –∞—Ä—Ö–∏–≤, –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ')
                .setValue(this.plugin.settings.excludeTags.join(', '))
                .onChange(async (value) => {
                    this.plugin.settings.excludeTags = value
                        .split(',')
                        .map(tag => tag.trim().replace(/^#/, ''))
                        .filter(tag => tag.length > 0);
                    await this.plugin.saveSettings();
                }));
    }
}

module.exports = MapsOfContentPlugin;